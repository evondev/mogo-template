@mixin box-shadow($top, $left, $blur, $color, $inset: false) {
  @if $inset {
    box-shadow: inset $top $left $blur $color;
  } @else {
    box-shadow: $top $left $blur $color;
  }
}

@mixin overlayContent() {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  z-index: 5;
  background-image: $linear;
  color: white;
  display: flex;
  align-items: center;
  justify-content: center;
  flex-direction: column;
  opacity: 0;
  visibility: hidden;
  transition: all 0.25s ease;
}

@mixin button($bgcolor: null, $color: null, $mw: null, $boxshadow: null) {
  border: 0;
  cursor: pointer;
  padding: 1.5rem;
  min-width: $mw;
  color: $color;
  background-color: $bgcolor;
  text-transform: uppercase;
  outline: none;
  box-shadow: $boxshadow;
  font-family: inherit;
  transition: 0.2s;
}

@mixin gradient(
  $color1,
  $color2,
  $alpha1: 1,
  $alpha2: 1,
  $direction: to right
) {
  background-image: linear-gradient(
    $direction,
    rgba($color1, $alpha1),
    rgba($color2, $alpha2)
  );
}

@mixin size($width, $height: $width) {
  width: $width;
  height: $height;
}

@mixin centerPosition($pos) {
  position: absolute;
  @if $pos == "both" {
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
  } @else if $pos == "left" {
    left: 50%;
    transform: translateX(-50%);
  } @else if $pos == "top" {
    top: 50%;
    transform: translateY(-50%);
  }
}

@mixin radius($all: null, $tl: $all, $tr: $all, $btl: $all, $btr: $all) {
  border-top-left-radius: $tl;
  border-top-right-radius: $tr;
  border-bottom-right-radius: $btr;
  border-bottom-left-radius: $btl;
}

@mixin position(
  $position,
  $top: null,
  $right: null,
  $bottom: null,
  $left: null
) {
  position: $position;
  top: $top;
  right: $right;
  bottom: $bottom;
  left: $left;
}

@mixin absolute($args...) {
  @include position(absolute, $args...);
}

@mixin relative($args...) {
  @include position(relative, $args...);
}

@mixin fixed($args...) {
  @include position(fixed, $args...);
}

@mixin toRem($size) {
  font-size: ($size / 16px) * 1rem;
}

@mixin minWidth($breakpoint) {
  @media only screen and (min-width: $breakpoint) {
    @content;
  }
}

@mixin maxWidth($breakpoint) {
  @media only screen and (max-width: $breakpoint) {
    @content;
  }
}

@mixin flex($direction: row, $content: null, $items: null, $wrap: null) {
  display: flex;
  flex-direction: $direction;
  justify-content: $content;
  align-items: $items;
  flex-wrap: $wrap;
}

@mixin hoverEffect($className, $classItem: "item") {
  #{$className} {
    &-#{$classItem} {
      position: relative;
      transition: transform 0.25s linear;
    }
    &-#{$classItem}:hover {
      transform: translate(-10px, -10px);
    }
    &-#{$classItem}:hover:after {
      transform: translate(10px, 10px);
    }
    &-#{$classItem}:hover #{$className}-content {
      opacity: 1;
      visibility: visible;
    }
    &-#{$classItem}:after {
      content: "";
      position: absolute;
      top: 0;
      left: 0;
      @include size(100%);
      background-color: $third-color;
      z-index: -1;
      transition: transform 0.25s linear;
    }
    &-content {
      @include overlayContent();
    }
  }
}

@mixin flexLayout($className, $spacer: "30px", $column: 3) {
  #{$className} {
    @include minWidth(768px) {
      &-list {
        display: flex;
        flex-wrap: wrap;
        margin-left: -#{$spacer};
      }
      &-item {
        margin-left: #{$spacer};
        width: calc(calc(100% / #{$column}) - #{$spacer});
      }
    }
    @include maxWidth(767px) {
      &-item {
        margin-bottom: #{$spacer};
      }
    }
  }
}
